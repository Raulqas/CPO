#include <QApplication>
#include <QMainWindow>
#include <QPushButton>
#include <QTextEdit>
#include <QVBoxLayout>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>
#include <QSqlRecord>
#include <QSqlField>
#include <QInputDialog>
#include <QDebug>

class MainWindow : public QMainWindow {
    Q_OBJECT
public:
    MainWindow(QWidget *parent = nullptr) : QMainWindow(parent) {
        setWindowTitle("SQLite Qt Example");
        centralWidget = new QWidget(this);
        setCentralWidget(centralWidget);

        QVBoxLayout *layout = new QVBoxLayout(centralWidget);

        displayButton = new QPushButton("Display Data", this);
        connect(displayButton, &QPushButton::clicked, this, &MainWindow::displayData);
        layout->addWidget(displayButton);

        addButton = new QPushButton("Add Data", this);
        connect(addButton, &QPushButton::clicked, this, &MainWindow::addData);
        layout->addWidget(addButton);

        deleteButton = new QPushButton("Delete Data", this);
        connect(deleteButton, &QPushButton::clicked, this, &MainWindow::deleteData);
        layout->addWidget(deleteButton);

        addPositionButton = new QPushButton("Add Position", this);
        connect(addPositionButton, &QPushButton::clicked, this, &MainWindow::addPosition);
        layout->addWidget(addPositionButton);

        deletePositionButton = new QPushButton("Delete Position", this);
        connect(deletePositionButton, &QPushButton::clicked, this, &MainWindow::deletePosition);
        layout->addWidget(deletePositionButton);

        displayPositionsButton = new QPushButton("Display Positions", this);
        connect(displayPositionsButton, &QPushButton::clicked, this, &MainWindow::displayPositions);
        layout->addWidget(displayPositionsButton);

        view = new QTextEdit(this);
        view->setReadOnly(true);
        layout->addWidget(view);

        if (!initializeDatabase()) {
            view->setText("Failed to open database");
        }
    }

private slots:
    void displayData() {
        executeSql("SELECT * FROM Преподаватели;");
    }

    void addData() {
        bool ok;
        QString fio = QInputDialog::getText(this, "Add Data", "Enter FIO:", QLineEdit::Normal, "", &ok);
        if (ok && !fio.isEmpty()) {
            QString dob = QInputDialog::getText(this, "Add Data", "Enter Date of Birth (YYYY-MM-DD):", QLineEdit::Normal, "", &ok);
            if (ok && !dob.isEmpty()) {
                QString sql = QString("INSERT INTO Преподаватели (ФИО, Дата_рождения) VALUES ('%1', '%2');").arg(fio).arg(dob);
                executeSql(sql);
            }
        }
    }

    void deleteData() {
        bool ok;
        QString idStr = QInputDialog::getText(this, "Delete Data", "Enter ID of record to delete:", QLineEdit::Normal, "", &ok);
        if (ok && !idStr.isEmpty()) {
            int id = idStr.toInt(&ok);
            if (ok) {
                QString sql = QString("DELETE FROM Преподаватели WHERE id=%1;").arg(id);
                executeSql(sql);
            }
        }
    }

    void addPosition() {
        bool ok;
        QString teacherId = QInputDialog::getText(this, "Add Position", "Enter Teacher ID:", QLineEdit::Normal, "", &ok);
        if (ok && !teacherId.isEmpty()) {
            QString position = QInputDialog::getText(this, "Add Position", "Enter Position:", QLineEdit::Normal, "", &ok);
            if (ok && !position.isEmpty()) {
                QString sql = QString("INSERT INTO Должности (Преподаватель_id, Наименование) VALUES (%1, '%2');").arg(teacherId).arg(position);
                executeSql(sql);
            }
        }
    }

    void deletePosition() {
        bool ok;
        QString idStr = QInputDialog::getText(this, "Delete Position", "Enter ID of position to delete:", QLineEdit::Normal, "", &ok);
        if (ok && !idStr.isEmpty()) {
            int id = idStr.toInt(&ok);
            if (ok) {
                QString sql = QString("DELETE FROM Должности WHERE id=%1;").arg(id);
                executeSql(sql);
            }
        }
    }

    void displayPositions() {
        executeSql("SELECT * FROM Должности;");
    }

private:
    QWidget *centralWidget;
    QTextEdit *view;
    QPushButton *displayButton;
    QPushButton *addButton;
    QPushButton *deleteButton;
    QPushButton *addPositionButton;
    QPushButton *deletePositionButton;
    QPushButton *displayPositionsButton;
    QSqlDatabase db;

    bool initializeDatabase() {
        db = QSqlDatabase::addDatabase("QSQLITE");
        db.setDatabaseName("database.db");

        if (!db.open()) {
            qDebug() << "Error opening database:" << db.lastError().text();
            return false;
        }

        QSqlQuery query;
        query.exec("CREATE TABLE IF NOT EXISTS Преподаватели (id INTEGER PRIMARY KEY AUTOINCREMENT, ФИО TEXT, Дата_рождения TEXT);");
        query.exec("CREATE TABLE IF NOT EXISTS Должности (id INTEGER PRIMARY KEY AUTOINCREMENT, Преподаватель_id INTEGER, Наименование TEXT, FOREIGN KEY (Преподаватель_id) REFERENCES Преподаватели(id) ON DELETE CASCADE);");

        QString triggerSql = "CREATE TRIGGER IF NOT EXISTS delete_teacher_position "
                             "AFTER DELETE ON Преподаватели "
                             "FOR EACH ROW "
                             "BEGIN "
                             "DELETE FROM Должности WHERE Преподаватель_id = OLD.id; "
                             "END;";
        query.exec(triggerSql);

        return true;
    }

    void executeSql(const QString &sql) {
        QSqlQuery query(sql);
        if (!query.exec()) {
            view->setText("SQL error: " + query.lastError().text());
            return;
        }

        view->clear();
        while (query.next()) {
            QSqlRecord record = query.record();
            QString rowData;
            for (int i = 0; i < record.count(); ++i) {
                QSqlField field = record.field(i);
                rowData += field.name() + " = " + field.value().toString() + "\n";
            }
            rowData += "\n";
            view->insertPlainText(rowData);
        }
    }
};

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);

    MainWindow mainWindow;
    mainWindow.show();

    return app.exec();
}

#include "main.moc"
